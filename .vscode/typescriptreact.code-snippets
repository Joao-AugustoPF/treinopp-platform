{
  "Next.js Page": {
    "prefix": "npage",
    "body": [
      "export const metadata = {",
      "  title: '${1:Page Title}',",
      "  description: '${2:Page Description}',",
      "};",
      "",
      "export default function Page() {",
      "  return (",
      "    <main>",
      "      <h1>${3:Page Content}</h1>",
      "    </main>",
      "  );",
      "}",
    ],
    "description": "Creates a Next.js page component with metadata",
  },
  "Next.js Layout": {
    "prefix": "nlayout",
    "body": [
      "export default function Layout({",
      "  children,",
      "}: {",
      "  children: React.ReactNode;",
      "}) {",
      "  return (",
      "    <div>",
      "      ${1:Layout Content}",
      "      {children}",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "Creates a Next.js layout component",
  },
  "React TypeScript Component": {
    "prefix": "rcomp",
    "body": [
      "type ${1:ComponentName}Props = {",
      "  ${2:prop}: ${3:type};",
      "};",
      "",
      "export default function ${1:ComponentName}({ ${2:prop} }: ${1:ComponentName}Props) {",
      "  return (",
      "    <div>",
      "      ${4:component content}",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "Creates a React TypeScript component with props",
  },
  "React Hook": {
    "prefix": "rhook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "export function use${1:HookName}(${2:params}) {",
      "  const [${3:state}, set${3/(.*)/${1:/capitalize}/}] = useState(${4:initialState});",
      "",
      "  useEffect(() => {",
      "    ${5:effect}",
      "  }, [${6:dependencies}]);",
      "",
      "  return ${7:returnValue};",
      "}",
    ],
    "description": "Creates a custom React hook",
  },
  "API Route Handler": {
    "prefix": "napi",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "",
      "export async function ${1|GET,POST,PUT,DELETE|}(req: NextRequest) {",
      "  try {",
      "    ${2:// Handler implementation}",
      "    return NextResponse.json({ message: 'Success' });",
      "  } catch (error) {",
      "    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });",
      "  }",
      "}",
    ],
    "description": "Creates a Next.js API route handler",
  },
  "SWR Hook": {
    "prefix": "swr",
    "body": [
      "import useSWR from 'swr';",
      "",
      "export function use${1:DataName}() {",
      "  const { data, error, isLoading, mutate } = useSWR<${2:DataType}>(",
      "    '${3:apiEndpoint}',",
      "    async (url) => {",
      "      const response = await fetch(url);",
      "      if (!response.ok) throw new Error('Network response was not ok');",
      "      return response.json();",
      "    }",
      "  );",
      "",
      "  return {",
      "    data,",
      "    isLoading,",
      "    isError: error,",
      "    mutate,",
      "  };",
      "}",
    ],
    "description": "Creates a SWR hook for data fetching",
  },
  "Form with React Hook Form": {
    "prefix": "rhform",
    "body": [
      "import { useForm } from 'react-hook-form';",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import { z } from 'zod';",
      "",
      "const schema = z.object({",
      "  ${1:field}: z.${2:string}(),",
      "});",
      "",
      "type FormData = z.infer<typeof schema>;",
      "",
      "export default function ${3:FormComponent}() {",
      "  const {",
      "    register,",
      "    handleSubmit,",
      "    formState: { errors },",
      "  } = useForm<FormData>({",
      "    resolver: zodResolver(schema),",
      "  });",
      "",
      "  const onSubmit = (data: FormData) => {",
      "    console.log(data);",
      "  };",
      "",
      "  return (",
      "    <form onSubmit={handleSubmit(onSubmit)}>",
      "      <input {...register('${1:field}')} />",
      "      {errors.${1:field} && <span>{errors.${1:field}?.message}</span>}",
      "      <button type=\"submit\">Submit</button>",
      "    </form>",
      "  );",
      "}",
    ],
    "description": "Creates a form component with React Hook Form and Zod validation",
  },
}
